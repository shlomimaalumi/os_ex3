#include <iostream>
#include <map>
#include "MapReduceClient.h"
#include "MapReduceFramework.h"

#define NUM_ITERS 10000
#define RANGE 1000

struct NumWrapper : public K1, public V1, public K2, public V2, public K3, public V3 {
    int num{};

    bool operator< (const K1 &other) const override
    {
      return num < ((NumWrapper &) other).num;
    }

    bool operator< (const K2 &other) const override
    {
      return num < ((NumWrapper &) other).num;
    }

    bool operator< (const K3 &other) const override
    {
      return num < ((NumWrapper &) other).num;
    }

    ~NumWrapper ()
    {
    }
};

struct MapReduceImp : public MapReduceClient {
    void Map (const K1 *key, const V1 *val, void *context) const
    {
      auto s = (NumWrapper *) key;
      auto e = (NumWrapper *) val;

      for (int i = s->num; i < e->num; ++i)
      {
        auto one = new NumWrapper ();
        one->num = 1;
        auto k = new NumWrapper ();
        k->num = i;
        emit2 (k, one, context);
      }
    }
    virtual void map (const K1 *key, const V1 *value, void *context) const override
    {
      Map (key, value, context);
    }

    void Reduce (const K2 *key, const IntermediateVec *vals, void *context) const
    {
      auto n = (NumWrapper *const) key;
      int r = 0;
      for (auto &val : *vals)
      {
        r++;
        delete val.first;
        delete val.second;
      }
      auto res = new NumWrapper ();
      res->num = n->num;
      auto times = new NumWrapper ();
      times->num = r;
      emit3 (res, times, context);
    }

    virtual void reduce (const IntermediateVec *pairs, void *context) const override
    {
      if (!pairs->empty ())
      {
        Reduce ((*pairs)[0].first, pairs, context);
      }
    }
};

int main (int argc, char *argv[])
{
  InputVec v;
  srand (0);
  for (int i = 0; i < NUM_ITERS; ++i)
  {
    auto s = new NumWrapper ();
    s->num = 1;
    auto e = new NumWrapper ();
    e->num = std::rand () % RANGE + 1;;
    auto p = std::make_pair (s, e);
    v.push_back (InputPair (p.first, p.second));
  }
  MapReduceImp m;
  OutputVec results;
  auto job = startMapReduceJob (m, v, results, 10);
  waitForJob (job);
  closeJobHandle (job);
  std::map<int, int> expectedOutput = {
      {1, 9988},
      {2, 9979},
      {3, 9966},
      {4, 9958},
      {5, 9946},
      {6, 9937},
      {7, 9931},
      {8, 9924},
      {9, 9914},
      {10, 9905},
      {11, 9893},
      {12, 9882},
      {13, 9872},
      {14, 9866},
      {15, 9856},
      {16, 9849},
      {17, 9840},
      {18, 9824},
      {19, 9809},
      {20, 9799},
      {21, 9792},
      {22, 9777},
      {23, 9766},
      {24, 9745},
      {25, 9742},
      {26, 9734},
      {27, 9725},
      {28, 9707},
      {29, 9698},
      {30, 9688},
      {31, 9677},
      {32, 9671},
      {33, 9655},
      {34, 9648},
      {35, 9640},
      {36, 9634},
      {37, 9620},
      {38, 9608},
      {39, 9595},
      {40, 9585},
      {41, 9578},
      {42, 9572},
      {43, 9555},
      {44, 9545},
      {45, 9539},
      {46, 9535},
      {47, 9519},
      {48, 9513},
      {49, 9505},
      {50, 9495},
      {51, 9482},
      {52, 9468},
      {53, 9461},
      {54, 9442},
      {55, 9435},
      {56, 9421},
      {57, 9411},
      {58, 9395},
      {59, 9386},
      {60, 9376},
      {61, 9368},
      {62, 9363},
      {63, 9353},
      {64, 9345},
      {65, 9333},
      {66, 9329},
      {67, 9321},
      {68, 9311},
      {69, 9306},
      {70, 9289},
      {71, 9275},
      {72, 9262},
      {73, 9247},
      {74, 9238},
      {75, 9226},
      {76, 9219},
      {77, 9210},
      {78, 9205},
      {79, 9193},
      {80, 9188},
      {81, 9179},
      {82, 9163},
      {83, 9148},
      {84, 9137},
      {85, 9128},
      {86, 9121},
      {87, 9108},
      {88, 9099},
      {89, 9086},
      {90, 9079},
      {91, 9065},
      {92, 9049},
      {93, 9039},
      {94, 9033},
      {95, 9018},
      {96, 9009},
      {97, 9002},
      {98, 8996},
      {99, 8983},
      {100, 8977},
      {101, 8967},
      {102, 8956},
      {103, 8952},
      {104, 8944},
      {105, 8935},
      {106, 8927},
      {107, 8919},
      {108, 8901},
      {109, 8896},
      {110, 8883},
      {111, 8877},
      {112, 8866},
      {113, 8857},
      {114, 8852},
      {115, 8843},
      {116, 8834},
      {117, 8823},
      {118, 8813},
      {119, 8806},
      {120, 8800},
      {121, 8787},
      {122, 8782},
      {123, 8770},
      {124, 8756},
      {125, 8738},
      {126, 8727},
      {127, 8720},
      {128, 8708},
      {129, 8692},
      {130, 8682},
      {131, 8667},
      {132, 8653},
      {133, 8646},
      {134, 8640},
      {135, 8631},
      {136, 8621},
      {137, 8610},
      {138, 8602},
      {139, 8590},
      {140, 8579},
      {141, 8565},
      {142, 8553},
      {143, 8544},
      {144, 8537},
      {145, 8530},
      {146, 8523},
      {147, 8511},
      {148, 8500},
      {149, 8494},
      {150, 8481},
      {151, 8473},
      {152, 8462},
      {153, 8455},
      {154, 8446},
      {155, 8430},
      {156, 8419},
      {157, 8411},
      {158, 8396},
      {159, 8387},
      {160, 8375},
      {161, 8360},
      {162, 8344},
      {163, 8339},
      {164, 8327},
      {165, 8316},
      {166, 8307},
      {167, 8299},
      {168, 8292},
      {169, 8280},
      {170, 8272},
      {171, 8265},
      {172, 8251},
      {173, 8235},
      {174, 8221},
      {175, 8206},
      {176, 8199},
      {177, 8193},
      {178, 8179},
      {179, 8173},
      {180, 8162},
      {181, 8150},
      {182, 8136},
      {183, 8129},
      {184, 8116},
      {185, 8104},
      {186, 8095},
      {187, 8080},
      {188, 8068},
      {189, 8062},
      {190, 8051},
      {191, 8038},
      {192, 8027},
      {193, 8016},
      {194, 8005},
      {195, 7997},
      {196, 7986},
      {197, 7972},
      {198, 7958},
      {199, 7946},
      {200, 7934},
      {201, 7923},
      {202, 7915},
      {203, 7900},
      {204, 7891},
      {205, 7885},
      {206, 7870},
      {207, 7855},
      {208, 7844},
      {209, 7839},
      {210, 7829},
      {211, 7822},
      {212, 7811},
      {213, 7805},
      {214, 7792},
      {215, 7788},
      {216, 7774},
      {217, 7760},
      {218, 7754},
      {219, 7741},
      {220, 7735},
      {221, 7721},
      {222, 7710},
      {223, 7701},
      {224, 7691},
      {225, 7677},
      {226, 7665},
      {227, 7649},
      {228, 7640},
      {229, 7629},
      {230, 7619},
      {231, 7613},
      {232, 7607},
      {233, 7598},
      {234, 7588},
      {235, 7574},
      {236, 7563},
      {237, 7550},
      {238, 7542},
      {239, 7526},
      {240, 7521},
      {241, 7512},
      {242, 7504},
      {243, 7493},
      {244, 7487},
      {245, 7475},
      {246, 7466},
      {247, 7455},
      {248, 7446},
      {249, 7444},
      {250, 7430},
      {251, 7422},
      {252, 7413},
      {253, 7408},
      {254, 7399},
      {255, 7385},
      {256, 7368},
      {257, 7358},
      {258, 7343},
      {259, 7333},
      {260, 7318},
      {261, 7298},
      {262, 7293},
      {263, 7289},
      {264, 7281},
      {265, 7268},
      {266, 7260},
      {267, 7254},
      {268, 7243},
      {269, 7241},
      {270, 7225},
      {271, 7213},
      {272, 7198},
      {273, 7189},
      {274, 7183},
      {275, 7173},
      {276, 7165},
      {277, 7156},
      {278, 7147},
      {279, 7141},
      {280, 7130},
      {281, 7119},
      {282, 7107},
      {283, 7101},
      {284, 7096},
      {285, 7090},
      {286, 7083},
      {287, 7073},
      {288, 7063},
      {289, 7056},
      {290, 7047},
      {291, 7032},
      {292, 7022},
      {293, 7005},
      {294, 6993},
      {295, 6981},
      {296, 6971},
      {297, 6957},
      {298, 6945},
      {299, 6937},
      {300, 6929},
      {301, 6919},
      {302, 6912},
      {303, 6905},
      {304, 6892},
      {305, 6878},
      {306, 6865},
      {307, 6858},
      {308, 6849},
      {309, 6836},
      {310, 6830},
      {311, 6820},
      {312, 6812},
      {313, 6804},
      {314, 6793},
      {315, 6784},
      {316, 6770},
      {317, 6762},
      {318, 6754},
      {319, 6752},
      {320, 6740},
      {321, 6727},
      {322, 6721},
      {323, 6715},
      {324, 6697},
      {325, 6689},
      {326, 6672},
      {327, 6661},
      {328, 6648},
      {329, 6637},
      {330, 6627},
      {331, 6621},
      {332, 6617},
      {333, 6610},
      {334, 6601},
      {335, 6591},
      {336, 6579},
      {337, 6568},
      {338, 6556},
      {339, 6545},
      {340, 6528},
      {341, 6517},
      {342, 6508},
      {343, 6497},
      {344, 6486},
      {345, 6481},
      {346, 6477},
      {347, 6466},
      {348, 6455},
      {349, 6447},
      {350, 6438},
      {351, 6427},
      {352, 6416},
      {353, 6407},
      {354, 6395},
      {355, 6382},
      {356, 6373},
      {357, 6367},
      {358, 6362},
      {359, 6348},
      {360, 6346},
      {361, 6338},
      {362, 6327},
      {363, 6316},
      {364, 6309},
      {365, 6298},
      {366, 6289},
      {367, 6276},
      {368, 6262},
      {369, 6250},
      {370, 6244},
      {371, 6233},
      {372, 6227},
      {373, 6222},
      {374, 6215},
      {375, 6207},
      {376, 6196},
      {377, 6186},
      {378, 6179},
      {379, 6173},
      {380, 6163},
      {381, 6152},
      {382, 6142},
      {383, 6128},
      {384, 6123},
      {385, 6117},
      {386, 6108},
      {387, 6094},
      {388, 6086},
      {389, 6075},
      {390, 6065},
      {391, 6059},
      {392, 6047},
      {393, 6035},
      {394, 6025},
      {395, 6014},
      {396, 6010},
      {397, 5997},
      {398, 5987},
      {399, 5976},
      {400, 5968},
      {401, 5955},
      {402, 5948},
      {403, 5941},
      {404, 5925},
      {405, 5914},
      {406, 5903},
      {407, 5896},
      {408, 5886},
      {409, 5876},
      {410, 5866},
      {411, 5858},
      {412, 5848},
      {413, 5835},
      {414, 5826},
      {415, 5814},
      {416, 5804},
      {417, 5798},
      {418, 5784},
      {419, 5774},
      {420, 5772},
      {421, 5768},
      {422, 5756},
      {423, 5744},
      {424, 5738},
      {425, 5730},
      {426, 5720},
      {427, 5707},
      {428, 5696},
      {429, 5673},
      {430, 5661},
      {431, 5654},
      {432, 5642},
      {433, 5633},
      {434, 5623},
      {435, 5618},
      {436, 5603},
      {437, 5596},
      {438, 5584},
      {439, 5577},
      {440, 5566},
      {441, 5553},
      {442, 5545},
      {443, 5537},
      {444, 5530},
      {445, 5518},
      {446, 5501},
      {447, 5487},
      {448, 5473},
      {449, 5459},
      {450, 5450},
      {451, 5443},
      {452, 5428},
      {453, 5420},
      {454, 5415},
      {455, 5408},
      {456, 5400},
      {457, 5393},
      {458, 5383},
      {459, 5370},
      {460, 5363},
      {461, 5351},
      {462, 5339},
      {463, 5331},
      {464, 5323},
      {465, 5315},
      {466, 5302},
      {467, 5288},
      {468, 5278},
      {469, 5266},
      {470, 5257},
      {471, 5250},
      {472, 5241},
      {473, 5228},
      {474, 5222},
      {475, 5214},
      {476, 5206},
      {477, 5198},
      {478, 5195},
      {479, 5186},
      {480, 5183},
      {481, 5169},
      {482, 5158},
      {483, 5151},
      {484, 5139},
      {485, 5127},
      {486, 5113},
      {487, 5095},
      {488, 5078},
      {489, 5070},
      {490, 5057},
      {491, 5047},
      {492, 5030},
      {493, 5014},
      {494, 5006},
      {495, 4996},
      {496, 4985},
      {497, 4973},
      {498, 4963},
      {499, 4952},
      {500, 4939},
      {501, 4926},
      {502, 4916},
      {503, 4905},
      {504, 4894},
      {505, 4880},
      {506, 4872},
      {507, 4857},
      {508, 4849},
      {509, 4835},
      {510, 4827},
      {511, 4817},
      {512, 4810},
      {513, 4797},
      {514, 4785},
      {515, 4779},
      {516, 4767},
      {517, 4759},
      {518, 4756},
      {519, 4745},
      {520, 4735},
      {521, 4726},
      {522, 4721},
      {523, 4708},
      {524, 4698},
      {525, 4687},
      {526, 4678},
      {527, 4669},
      {528, 4663},
      {529, 4645},
      {530, 4634},
      {531, 4622},
      {532, 4612},
      {533, 4600},
      {534, 4589},
      {535, 4582},
      {536, 4578},
      {537, 4571},
      {538, 4558},
      {539, 4536},
      {540, 4525},
      {541, 4510},
      {542, 4502},
      {543, 4489},
      {544, 4483},
      {545, 4476},
      {546, 4469},
      {547, 4462},
      {548, 4458},
      {549, 4445},
      {550, 4439},
      {551, 4429},
      {552, 4415},
      {553, 4409},
      {554, 4404},
      {555, 4389},
      {556, 4380},
      {557, 4374},
      {558, 4367},
      {559, 4361},
      {560, 4348},
      {561, 4340},
      {562, 4332},
      {563, 4323},
      {564, 4312},
      {565, 4304},
      {566, 4294},
      {567, 4281},
      {568, 4263},
      {569, 4253},
      {570, 4239},
      {571, 4229},
      {572, 4221},
      {573, 4217},
      {574, 4209},
      {575, 4197},
      {576, 4193},
      {577, 4182},
      {578, 4177},
      {579, 4173},
      {580, 4166},
      {581, 4160},
      {582, 4155},
      {583, 4144},
      {584, 4135},
      {585, 4126},
      {586, 4115},
      {587, 4104},
      {588, 4092},
      {589, 4087},
      {590, 4073},
      {591, 4060},
      {592, 4044},
      {593, 4035},
      {594, 4021},
      {595, 4015},
      {596, 4007},
      {597, 3997},
      {598, 3992},
      {599, 3983},
      {600, 3976},
      {601, 3964},
      {602, 3958},
      {603, 3947},
      {604, 3938},
      {605, 3924},
      {606, 3913},
      {607, 3899},
      {608, 3889},
      {609, 3881},
      {610, 3875},
      {611, 3863},
      {612, 3858},
      {613, 3851},
      {614, 3841},
      {615, 3832},
      {616, 3824},
      {617, 3814},
      {618, 3803},
      {619, 3792},
      {620, 3782},
      {621, 3772},
      {622, 3762},
      {623, 3756},
      {624, 3748},
      {625, 3739},
      {626, 3732},
      {627, 3721},
      {628, 3712},
      {629, 3701},
      {630, 3694},
      {631, 3678},
      {632, 3664},
      {633, 3657},
      {634, 3643},
      {635, 3632},
      {636, 3622},
      {637, 3610},
      {638, 3603},
      {639, 3594},
      {640, 3581},
      {641, 3570},
      {642, 3563},
      {643, 3554},
      {644, 3544},
      {645, 3533},
      {646, 3522},
      {647, 3517},
      {648, 3506},
      {649, 3501},
      {650, 3493},
      {651, 3485},
      {652, 3477},
      {653, 3462},
      {654, 3454},
      {655, 3443},
      {656, 3436},
      {657, 3428},
      {658, 3414},
      {659, 3408},
      {660, 3398},
      {661, 3381},
      {662, 3370},
      {663, 3359},
      {664, 3356},
      {665, 3344},
      {666, 3339},
      {667, 3329},
      {668, 3316},
      {669, 3305},
      {670, 3289},
      {671, 3288},
      {672, 3283},
      {673, 3268},
      {674, 3255},
      {675, 3249},
      {676, 3236},
      {677, 3226},
      {678, 3212},
      {679, 3207},
      {680, 3198},
      {681, 3189},
      {682, 3175},
      {683, 3166},
      {684, 3149},
      {685, 3144},
      {686, 3130},
      {687, 3123},
      {688, 3116},
      {689, 3107},
      {690, 3101},
      {691, 3087},
      {692, 3084},
      {693, 3076},
      {694, 3068},
      {695, 3059},
      {696, 3054},
      {697, 3047},
      {698, 3033},
      {699, 3026},
      {700, 3014},
      {701, 3002},
      {702, 2991},
      {703, 2978},
      {704, 2968},
      {705, 2954},
      {706, 2948},
      {707, 2942},
      {708, 2934},
      {709, 2925},
      {710, 2915},
      {711, 2899},
      {712, 2892},
      {713, 2885},
      {714, 2879},
      {715, 2872},
      {716, 2864},
      {717, 2855},
      {718, 2849},
      {719, 2835},
      {720, 2824},
      {721, 2811},
      {722, 2800},
      {723, 2792},
      {724, 2782},
      {725, 2776},
      {726, 2768},
      {727, 2757},
      {728, 2747},
      {729, 2738},
      {730, 2727},
      {731, 2720},
      {732, 2708},
      {733, 2694},
      {734, 2686},
      {735, 2675},
      {736, 2661},
      {737, 2648},
      {738, 2637},
      {739, 2629},
      {740, 2620},
      {741, 2614},
      {742, 2605},
      {743, 2596},
      {744, 2581},
      {745, 2574},
      {746, 2561},
      {747, 2545},
      {748, 2538},
      {749, 2533},
      {750, 2527},
      {751, 2516},
      {752, 2502},
      {753, 2487},
      {754, 2479},
      {755, 2466},
      {756, 2458},
      {757, 2454},
      {758, 2441},
      {759, 2432},
      {760, 2420},
      {761, 2408},
      {762, 2400},
      {763, 2386},
      {764, 2371},
      {765, 2357},
      {766, 2348},
      {767, 2335},
      {768, 2328},
      {769, 2315},
      {770, 2309},
      {771, 2297},
      {772, 2287},
      {773, 2277},
      {774, 2265},
      {775, 2253},
      {776, 2244},
      {777, 2225},
      {778, 2209},
      {779, 2205},
      {780, 2198},
      {781, 2181},
      {782, 2175},
      {783, 2166},
      {784, 2157},
      {785, 2142},
      {786, 2134},
      {787, 2119},
      {788, 2110},
      {789, 2100},
      {790, 2086},
      {791, 2072},
      {792, 2061},
      {793, 2053},
      {794, 2043},
      {795, 2030},
      {796, 2023},
      {797, 2015},
      {798, 2000},
      {799, 1995},
      {800, 1986},
      {801, 1974},
      {802, 1959},
      {803, 1948},
      {804, 1941},
      {805, 1932},
      {806, 1921},
      {807, 1914},
      {808, 1906},
      {809, 1895},
      {810, 1886},
      {811, 1875},
      {812, 1864},
      {813, 1850},
      {814, 1842},
      {815, 1831},
      {816, 1820},
      {817, 1808},
      {818, 1802},
      {819, 1790},
      {820, 1775},
      {821, 1763},
      {822, 1754},
      {823, 1749},
      {824, 1739},
      {825, 1733},
      {826, 1721},
      {827, 1711},
      {828, 1703},
      {829, 1691},
      {830, 1677},
      {831, 1669},
      {832, 1660},
      {833, 1651},
      {834, 1639},
      {835, 1633},
      {836, 1623},
      {837, 1617},
      {838, 1610},
      {839, 1601},
      {840, 1594},
      {841, 1581},
      {842, 1575},
      {843, 1568},
      {844, 1558},
      {845, 1551},
      {846, 1540},
      {847, 1533},
      {848, 1516},
      {849, 1510},
      {850, 1503},
      {851, 1488},
      {852, 1479},
      {853, 1467},
      {854, 1456},
      {855, 1448},
      {856, 1442},
      {857, 1431},
      {858, 1417},
      {859, 1408},
      {860, 1399},
      {861, 1389},
      {862, 1376},
      {863, 1369},
      {864, 1361},
      {865, 1355},
      {866, 1338},
      {867, 1334},
      {868, 1323},
      {869, 1311},
      {870, 1305},
      {871, 1296},
      {872, 1287},
      {873, 1274},
      {874, 1258},
      {875, 1255},
      {876, 1243},
      {877, 1225},
      {878, 1215},
      {879, 1200},
      {880, 1185},
      {881, 1179},
      {882, 1170},
      {883, 1157},
      {884, 1150},
      {885, 1132},
      {886, 1122},
      {887, 1111},
      {888, 1103},
      {889, 1090},
      {890, 1084},
      {891, 1080},
      {892, 1076},
      {893, 1064},
      {894, 1051},
      {895, 1038},
      {896, 1031},
      {897, 1023},
      {898, 1015},
      {899, 1001},
      {900, 994},
      {901, 990},
      {902, 982},
      {903, 966},
      {904, 961},
      {905, 950},
      {906, 944},
      {907, 939},
      {908, 933},
      {909, 916},
      {910, 911},
      {911, 904},
      {912, 894},
      {913, 888},
      {914, 883},
      {915, 873},
      {916, 862},
      {917, 850},
      {918, 834},
      {919, 818},
      {920, 811},
      {921, 805},
      {922, 793},
      {923, 784},
      {924, 774},
      {925, 762},
      {926, 753},
      {927, 746},
      {928, 729},
      {929, 721},
      {930, 712},
      {931, 702},
      {932, 694},
      {933, 683},
      {934, 674},
      {935, 662},
      {936, 657},
      {937, 648},
      {938, 643},
      {939, 633},
      {940, 618},
      {941, 609},
      {942, 596},
      {943, 583},
      {944, 575},
      {945, 561},
      {946, 554},
      {947, 541},
      {948, 532},
      {949, 526},
      {950, 507},
      {951, 496},
      {952, 488},
      {953, 479},
      {954, 471},
      {955, 461},
      {956, 453},
      {957, 437},
      {958, 423},
      {959, 409},
      {960, 395},
      {961, 385},
      {962, 381},
      {963, 375},
      {964, 370},
      {965, 360},
      {966, 351},
      {967, 345},
      {968, 333},
      {969, 325},
      {970, 315},
      {971, 303},
      {972, 294},
      {973, 280},
      {974, 273},
      {975, 264},
      {976, 252},
      {977, 243},
      {978, 229},
      {979, 221},
      {980, 208},
      {981, 197},
      {982, 186},
      {983, 177},
      {984, 167},
      {985, 154},
      {986, 149},
      {987, 138},
      {988, 128},
      {989, 121},
      {990, 107},
      {991, 95},
      {992, 87},
      {993, 80},
      {994, 72},
      {995, 56},
      {996, 47},
      {997, 27},
      {998, 13},
      {999, 7}

  };
  for (OutputPair &pair : results)
  {
    int c = ((NumWrapper *) pair.first)->num;
    int count = ((NumWrapper *) pair.second)->num ;
    auto iter = expectedOutput.find(c);
    if (iter != expectedOutput.end())
    {
      // element found;
      if (count != iter->second)
      {
        std::cout << "ERROR OF KEY:" << c <<std::endl<< "ACTUAL VALUE: " << count << ", EXPECTED VALUE: " << iter->second << std::endl;
      }
      else
      {
        expectedOutput.erase(iter);
      }
    }
    else
    {
      std::cout << "ERROR: THE KEY " << c << " WITH VALUE " << count << " DOES NOT EXIST." << std::endl;
    }
  }
  if (!expectedOutput.empty())
  {
    std::cout << "ERROR: YOU MISS SOME KEYS IN YOUR OUTPUT VEC" << std::endl;

  }
  for (auto &item : results)
  {
    // PRINT ALL KEYS, VALUES
    std::cout  << ((NumWrapper *) item.first)->num << ": " << ((NumWrapper *) item.second)->num << std::endl;
    delete item.first;
    delete item.second;
  }
  for (int i = 0; i < NUM_ITERS; ++i)
  {
    delete v.at (i).first;
    delete v.at (i).second;
  }
  std::cout << "PASSED THE TEST!" << std::endl;
}
